name: Windows Build with WinFsp

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main, develop ]

jobs:
  test-windows:
    name: Build on Windows with WinFsp
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSVC environment
      uses: microsoft/setup-msbuild@v2
    
    - name: Install WinFsp
      shell: powershell
      run: |
        # Download latest WinFsp installer
        $url = "https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-2.0.23075.msi"
        $output = "$env:TEMP\winfsp.msi"
        Write-Host "Downloading WinFsp from $url"
        Invoke-WebRequest -Uri $url -OutFile $output
        
        # Install silently with full feature set
        Write-Host "Installing WinFsp..."
        Start-Process msiexec.exe -Wait -ArgumentList "/i $output /quiet /qn ADDLOCAL=ALL"
        
        # Verify installation and set up environment
        $winfspPath = "C:\Program Files (x86)\WinFsp\lib\winfsp-x64.lib"
        $winfspRoot = "C:\Program Files (x86)\WinFsp"
        if (Test-Path $winfspPath) {
            Write-Host "✅ WinFsp installed successfully at C:\Program Files (x86)\WinFsp"
        } else {
            $winfspPath = "C:\Program Files\WinFsp\lib\winfsp-x64.lib"
            $winfspRoot = "C:\Program Files\WinFsp"
            if (Test-Path $winfspPath) {
                Write-Host "✅ WinFsp installed successfully at C:\Program Files\WinFsp"
            } else {
                Write-Error "❌ WinFsp installation failed"
                Write-Host "Searching for WinFsp installation..."
                Get-ChildItem "C:\Program Files*\*WinFsp*" -Recurse -ErrorAction SilentlyContinue
                exit 1
            }
        }
        
        # Add WinFsp bin directory to PATH for DLL resolution
        $winfspBin = "$winfspRoot\bin"
        if (Test-Path $winfspBin) {
            Write-Host "Adding WinFsp bin directory to PATH: $winfspBin"
            $env:PATH = "$winfspBin;$env:PATH"
            
            # Make PATH change persistent for the workflow
            Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
            echo "$winfspBin" >> $env:GITHUB_PATH
            
            # List WinFsp DLLs
            Write-Host "WinFsp DLLs available:"
            Get-ChildItem "$winfspBin\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
        } else {
            Write-Host "Warning: WinFsp bin directory not found at $winfspBin"
            Write-Host "Contents of WinFsp root directory:"
            Get-ChildItem "$winfspRoot" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
        }
    
    - name: Configure CMake
      run: |
        cmake -S . -B build-windows `
          -DCMAKE_BUILD_TYPE=Release `
          -DENABLE_METRICS=ON `
          -DBUILD_SHARED_LIBS=OFF `
          -A x64
    
    - name: Build
      run: cmake --build build-windows --config Release --parallel
    
    - name: Test WinFsp linking
      shell: powershell
      run: |
        $exe = "build-windows\bin\Release\CeWinFileCacheFS.exe"
        if (Test-Path $exe) {
            Write-Host "✅ Executable built successfully"
            
            # Check if WinFsp DLLs are properly linked
            Write-Host "Checking dependencies..."
            # Use where command to find dumpbin if available
            $dumpbin = Get-Command dumpbin -ErrorAction SilentlyContinue
            if ($dumpbin) {
                Write-Host "Running dumpbin /dependents:"
                dumpbin /dependents $exe
            } else {
                Write-Host "dumpbin not available, using PowerShell to check dependencies"
                # Alternative dependency check using PowerShell
                try {
                    $deps = Get-Content $exe -Encoding Byte -TotalCount 2048 | ForEach-Object { [char]$_ } | Out-String
                    Write-Host "Executable appears to be valid binary"
                } catch {
                    Write-Host "Error reading executable: $_"
                }
            }
            
            # Check if required WinFsp DLLs can be found
            Write-Host "Checking for WinFsp DLLs in PATH..."
            $winfspDlls = @("winfsp-x64.dll", "winfsp-msil.dll")
            foreach ($dll in $winfspDlls) {
                $found = Get-Command $dll -ErrorAction SilentlyContinue
                if ($found) {
                    Write-Host "✅ Found $dll at: $($found.Source)"
                } else {
                    Write-Host "❌ $dll not found in PATH"
                }
            }
            
            # Run basic functionality test from repository root
            Write-Host "Running basic functionality test..."
            Write-Host "Current directory: $(Get-Location)"
            Write-Host "Checking for config file..."
            if (Test-Path "compilers.json") {
                Write-Host "✅ Found compilers.json"
            } else {
                Write-Host "❌ compilers.json not found in current directory"
                Write-Host "Contents of current directory:"
                Get-ChildItem . -Name
            }
            
            # Copy config file to executable directory
            Write-Host "Copying config file to executable directory..."
            Copy-Item "compilers.json" "build-windows\bin\Release\" -Force
            
            # Copy WinFsp DLLs to executable directory as fallback
            Write-Host "Copying WinFsp DLLs to executable directory..."
            $winfspInstall = if (Test-Path "C:\Program Files (x86)\WinFsp") { "C:\Program Files (x86)\WinFsp" } else { "C:\Program Files\WinFsp" }
            $winfspBinDir = "$winfspInstall\bin"
            if (Test-Path $winfspBinDir) {
                Write-Host "Copying DLLs from: $winfspBinDir"
                Copy-Item "$winfspBinDir\*.dll" "build-windows\bin\Release\" -Force -ErrorAction SilentlyContinue
                
                # List what was copied
                Write-Host "DLLs in executable directory:"
                Get-ChildItem "build-windows\bin\Release\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
            } else {
                Write-Host "WinFsp bin directory not found at: $winfspBinDir"
            }
            
            Write-Host "Running test with explicit config path..."
            try {
                $output1 = & $exe --config "compilers.json" --test-config 2>&1
                Write-Host "Exit code: $LASTEXITCODE"
                Write-Host "Output:"
                Write-Host $output1
            } catch {
                Write-Host "Exception occurred: $_"
            }
            
            Write-Host "`n--- Second test ---"
            Write-Host "Running test with default config path..."
            try {
                $output2 = & $exe --test-config 2>&1
                Write-Host "Exit code: $LASTEXITCODE"
                Write-Host "Output:"
                Write-Host $output2
            } catch {
                Write-Host "Exception occurred: $_"
            }
            
            # Check if either test failed
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Test failed with exit code $LASTEXITCODE"
                exit 1
            }
        } else {
            Write-Error "❌ Executable not found"
            Write-Host "Contents of build-windows\bin\Release:"
            Get-ChildItem "build-windows\bin\Release" -ErrorAction SilentlyContinue
            exit 1
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-build
        path: |
          build-windows/bin/Release/CeWinFileCacheFS.exe
          build-windows/bin/Release/*.dll
          compilers.json
        retention-days: 7
    
    - name: Prepare release package
      if: startsWith(github.ref, 'refs/tags/')
      shell: powershell
      run: |
        # Create release directory
        $releaseDir = "ce-win-file-cache-${{ github.ref_name }}-windows-x64"
        New-Item -ItemType Directory -Force -Path $releaseDir
        
        # Copy binaries
        Copy-Item "build-windows/bin/Release/CeWinFileCacheFS.exe" $releaseDir/
        Copy-Item "build-windows/bin/Release/*.dll" $releaseDir/ -ErrorAction SilentlyContinue
        
        # Copy WinFsp DLLs
        Copy-Item "build-windows/bin/Release/winfsp-x64.dll" $releaseDir/
        Copy-Item "build-windows/bin/Release/winfsp-msil.dll" $releaseDir/
        
        # Copy configuration example
        Copy-Item "compilers.json" "$releaseDir/compilers.example.json"
        
        # Create README for the release
        @"
CE Win File Cache ${{ github.ref_name }}
========================================

This is a Windows x64 release of CE Win File Cache.

Prerequisites:
- Windows 10/11 or Windows Server 2016+
- WinFsp installed (https://github.com/winfsp/winfsp/releases)

Quick Start:
1. Install WinFsp if not already installed
2. Copy compilers.example.json to compilers.json and edit for your environment
3. Run: CeWinFileCacheFS.exe --config compilers.json --mount M:

For more information, see: https://github.com/compiler-explorer/ce-win-file-cache

"@ | Out-File -FilePath "$releaseDir/README.txt" -Encoding UTF8
        
        # Create zip archive
        Write-Host "Creating release archive..."
        Compress-Archive -Path $releaseDir -DestinationPath "$releaseDir.zip" -Force
        
        Write-Host "Release package created: $releaseDir.zip"
    
    - name: Upload release assets
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ce-win-file-cache-${{ github.ref_name }}-windows-x64.zip
        body: |
          ## CE Win File Cache ${{ github.ref_name }}
          
          ### Windows x64 Release
          
          This release includes:
          - `CeWinFileCacheFS.exe` - Main executable
          - Required WinFsp DLLs
          - Example configuration file
          - README with quick start instructions
          
          ### Prerequisites
          - Windows 10/11 or Windows Server 2016+
          - [WinFsp](https://github.com/winfsp/winfsp/releases) must be installed
          
          ### Installation
          1. Download and extract the release archive
          2. Install WinFsp if not already installed
          3. Copy `compilers.example.json` to `compilers.json`
          4. Edit the configuration for your environment
          5. Run `CeWinFileCacheFS.exe --config compilers.json --mount M:`
          
          See the [documentation](https://github.com/compiler-explorer/ce-win-file-cache/tree/${{ github.ref_name }}/docs) for detailed configuration and usage information.